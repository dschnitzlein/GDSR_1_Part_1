[
  {
    "objectID": "Part_1.html#seminarablauf",
    "href": "Part_1.html#seminarablauf",
    "title": "Teil I",
    "section": "Seminarablauf",
    "text": "Seminarablauf\n \n\n\n\n\nDatum\nUhrzeit\nThema\n\n\n\n\n18. Oktober 2024\n08:00 - 12:15 Uhr\nTermin 1\n\n\n22. November 2024\n08:00 - 12:15 Uhr\nTermin 2\n\n\n06. Dezember 2024\n08:00 - 12:15 Uhr\nTermin 3\n\n\n10. Januar 2025\n08:00 - 12:15 Uhr\nTermin 4\n\n\n17. Januar 2025\n08:00 - 10:00 Uhr (?)\nTermin 5\n\n\n\n\nAlle Termine finden online via Zoom statt. Der Link wird rechtzeitig vor dem jeweiligen Termin bereitgestellt. Nach jedem Termin wird es ein Problem Set (Hausaufgabe) geben, das bis zum nächsten Termin bearbeitet werden muss. Die Abgabe der Hausaufgaben ist Voraussetzung für die Bescheinigung der Kursteilnahme."
  },
  {
    "objectID": "Part_1.html#vorläufige-themenliste",
    "href": "Part_1.html#vorläufige-themenliste",
    "title": "Teil I",
    "section": "(Vorläufige) Themenliste",
    "text": "(Vorläufige) Themenliste\n\n\n\nEinführung in R und R-Studio: Überblick über die Installations- und Einrichtungsprozesse | Grundlegende Funktionen und Bedienung von R und RStudio\nGrundlagen der Statistiksprache R: Syntax und Datenstrukturen in R | Einführung in Funktionen und Pakete\nDatenmanagement in R: Methoden der Datenorganisation und -vorbereitung | Importieren, Bereinigen und Transformieren von Datensätzen\nEinführung in die Pakete des tidyverse: Überblick über die wichtigsten tidyverse-Pakete wie z.B. dplyr und ggplot2 | Anwendung dieser Pakete zur effizienten Datenanalyse und -visualisierung\nDeskriptive Statistik in R: Berechnung und Interpretation grundlegender statistischer Kennzahlen | Anwendung von deskriptiven Methoden zur Datenexploration | Einführung in die statistische Modellierung am Beispiel linearer Modelle\nDatenvisualisierung in R: Erstellen von publikationsreifen Grafiken und Diagrammen mit ggplot2 | Gestaltung und Interpretation von Datenvisualisierungen zur Unterstützung der Datenanalyse"
  },
  {
    "objectID": "Part_1.html#tagesablauf",
    "href": "Part_1.html#tagesablauf",
    "title": "Teil I",
    "section": "Tagesablauf",
    "text": "Tagesablauf\n\n\n\n\n\n\nUhrzeit\nThema\nThema\nRaum\n\n\n\n\n08:00 - 09:30\nBlock 1\nNN\nHauptraum\n\n\n09:45 - 11:15\nHands-On 1\nNN\nBreak-Out Räume\n\n\n11:30 - 12:15\nBlock 2\nNN\nHauptraum"
  },
  {
    "objectID": "Part_1.html#rstudio-ist-die-bevorzugte-ide-für-r",
    "href": "Part_1.html#rstudio-ist-die-bevorzugte-ide-für-r",
    "title": "Teil I",
    "section": "RStudio ist die bevorzugte IDE für R",
    "text": "RStudio ist die bevorzugte IDE für R"
  },
  {
    "objectID": "Part_1.html#r-als-taschenrechner-und-objekte",
    "href": "Part_1.html#r-als-taschenrechner-und-objekte",
    "title": "Teil I",
    "section": "R als Taschenrechner und Objekte",
    "text": "R als Taschenrechner und Objekte\n\nIn der einfachsten Anwendung können Sie R im interaktiven Gebrauch als Taschenrechner nutzen:\n\n\n\n\n\n\n\n\n\nMit dem Operator &lt;- weisen Sie R an, das Ergebnis des Ausdrucks der rechts des Operators steht in dem Objekt abzulegen (und ggf. das Objekt zu erzeugen), das links vom Operator steht.\n\n\n\n\n\n\n\n\n\n\nIn diesem Fall wird das Ergebnis von 1 + 3 in dem Objekt ergebnis abgelegt. Um den Inhalt eines Projekts anzuzeigen, müssen Sie (in den allermeisten Fällen) einfach den Namen des Objekts eingeben. Ist das Objekt komplexer (Modellergebnisse etc.) kann es sein, dass Sie explizit angeben müssen, dass das Objekt angezeigt werden soll print(Objekt)."
  },
  {
    "objectID": "Part_1.html#funktionen",
    "href": "Part_1.html#funktionen",
    "title": "Teil I",
    "section": "Funktionen",
    "text": "Funktionen\n\nR verwendet Funktionen um Operationen durchzuführen. Um eine Funktion namens Funktionsname auszuführen, geben wir Funktionsname(Eingabe1, Eingabe2, ...) ein, wobei die Eingaben (oder Argumente) Eingabe1 und Eingabe2 R mitteilen, wie die Funktion ausgeführt werden soll. Eine Funktion kann eine beliebige Anzahl von Eingaben haben. Um zum Beispiel einen Zahlenvektor aus einzelnen Zahlen zu erzeugen, verwenden wir die Funktion c(), der alle Zahlen innerhalb der Klammern zusammenfügt.\n\nDer folgende Befehl weist R an, die Zahlen 1, 3, 2 und 5 zusammenzufügen und als einen Vektor mit dem Namen x zu speichern. Wenn wir x eintippen, bekommen Sie den Vektor als Ergebnis angezeigt."
  },
  {
    "objectID": "Part_1.html#wo-bekomme-ich-hilfe",
    "href": "Part_1.html#wo-bekomme-ich-hilfe",
    "title": "Teil I",
    "section": "Wo bekomme ich Hilfe?",
    "text": "Wo bekomme ich Hilfe?\n\nWenn Sie mehr Informationen über eine bestimmte Funktion erfahren möchten, tippen Sie auf der Konsole ?Funktionsname ein. Wir können R anweisen, zwei Zahlenvektoren zu addieren. R addiert dann die erste Zahl von x zur ersten Zahl von y und so weiter. Allerdings müssen x und y die gleiche Länge haben. Wir können ihre Länge mit der Funktion length() überprüfen."
  },
  {
    "objectID": "Part_1.html#objekte",
    "href": "Part_1.html#objekte",
    "title": "Teil I",
    "section": "Objekte",
    "text": "Objekte\n\nR arbeitet mit Objekten. Mit der Funktion ls() können wir eine Liste aller bisher geladenen Objekte, wie z.B. Daten und Funktionen, anzeigen. Mit der Funktion rm() kann man alle Objekte löschen, die nicht mehr benötigt werden. Dies kann u.a. zur Speicheroptimierung sehr hilfreich sein.\n\n\n\n\n\n\n\n\n\nSie können auch alle Objekte auf einmal löschen."
  },
  {
    "objectID": "Part_1.html#matrizen",
    "href": "Part_1.html#matrizen",
    "title": "Teil I",
    "section": "Matrizen",
    "text": "Matrizen\n\nDie matrix() Funktion erstellt eine Matrix von Zahlen. Das Hilfe-File (?matrix) listet, dass die Funktion eine ganze Reihe von Argumenten akzeptiert. Wir fokussieren allerdings auf die ersten drei: Die Daten (Einträge in der Matrix), die Anzahl der Zeilen und die Anzahl der Spalten. Wir starten mit einer einfachen Matrix.\n\n\n\n\n\n\n\n\n\nHinweis: Die Zusätze data=, nrow=, und ncol= in der matrix() Funktion sind nicht unbedingt notwendig aber machen den Code lesbarer. Probieren Sie es einfach aus!"
  },
  {
    "objectID": "Part_1.html#reihenfolge-der-argumente-in-einer-funktion",
    "href": "Part_1.html#reihenfolge-der-argumente-in-einer-funktion",
    "title": "Teil I",
    "section": "Reihenfolge der Argumente in einer Funktion",
    "text": "Reihenfolge der Argumente in einer Funktion\n\nOft kann es allerdings hilfreich sein, die Namen der übergebenen Argumente anzugeben, da R sonst davon ausgeht, dass die Funktionsargumente in der gleichen Reihenfolge an die Funktion übergeben werden, wie sie in der Hilfedatei der Funktion angegeben sind. Im obigen Beispiel erstellt R standardmäßig Matrizen, indem es nacheinander die Spalten ausfüllt. Alternativ kann die Option byrow = TRUE verwendet werden, um die Matrix in der Reihenfolge der Zeilen aufzufüllen.\n\nProbieren Sie es aus:\n\n\n\n\n\n\n\n\n\n\nBeachten Sie, dass wir im obigen Befehl die Matrix nicht einem Objekt wie x zugewiesen haben. In diesem Fall wird die Matrix auf dem Bildschirm ausgegeben, aber nicht für zukünftige Berechnungen gespeichert."
  },
  {
    "objectID": "Part_1.html#wichtige-funktionen-1",
    "href": "Part_1.html#wichtige-funktionen-1",
    "title": "Teil I",
    "section": "Wichtige Funktionen (1)",
    "text": "Wichtige Funktionen (1)\n\nDie Funktion rnorm() erzeugt einen Vektor von standardnormalverteilten Zufallszahlen, wobei das erste Argument n der Stichprobenumfang ist. Jedes Mal wenn wir diese Funktion aufrufen, erhalten wir eine andere Antwort. Hier bilden wir zwei korrelierte Mengen von Zahlen, x und y, und verwenden die Funktion cor(), um die Korrelation zwischen ihnen zu berechnen. Wenn Sie den Code mehrfach ausführen, sehen Sie, dass sich die Ergebnisse verändern.\n\n\n\n\n\n\n\n\n\nStandardmäßig erzeugt rnorm() standardnormalverteilte Zufallszahlen mit einem Mittelwert von \\(0\\) und einer Standardabweichung von \\(1\\). Der Mittelwert und die Standardabweichung können jedoch mit den Argumenten mean und sd geändert werden, wie oben dargestellt."
  },
  {
    "objectID": "Part_1.html#wichtige-funktionen-2",
    "href": "Part_1.html#wichtige-funktionen-2",
    "title": "Teil I",
    "section": "Wichtige Funktionen (2)",
    "text": "Wichtige Funktionen (2)\n\nMeistens wollen wir, dass unser Code genau denselben Satz von Zufallszahlen (re)produziert; dazu können wir die Funktion set.seed() verwenden. Die Funktion set.seed() benötigt ein (beliebiges) ganzzahliges Argument.\n\n\n\n\n\n\n\n\n\n\n\nSie sollten set.seed() immer dann nutzen, wenn Reproduzierbarkeit der Ergebnisse wichtig ist (also fast immer)."
  },
  {
    "objectID": "Part_1.html#wichtige-funktionen-3",
    "href": "Part_1.html#wichtige-funktionen-3",
    "title": "Teil I",
    "section": "Wichtige Funktionen (3)",
    "text": "Wichtige Funktionen (3)\n\nDie Funktionen mean() und var() berechnen den Mittelwert und die Varianz eines Vektors von Zahlen. Wendet man sqrt() auf die Ausgabe von var() an, erhält man die Standardabweichung, alternativ nutzen Sie die Funktion sd() ."
  },
  {
    "objectID": "Part_1.html#wichtige-funktionen-4",
    "href": "Part_1.html#wichtige-funktionen-4",
    "title": "Teil I",
    "section": "Wichtige Funktionen (4)",
    "text": "Wichtige Funktionen (4)\n\nDie Funktion seq() erstellt eine Folge (Sequenz) von Zahlen. Z.B. seq(a, b) erstellt einen Vektor von Ganzzahlen (Integer) zwischen a und b. Auch seq() hat viele mögliche Argumente: z.B. seq(0, 1, length = 10) erstellt eine Folge von 10 Zahlen mit gleichen Abständen zwischen 0 und 1. Anmerkung: 3:11 ist kurz für seq(3, 11) für Ganzzahlen.\n\n\n\n\n\n\n\n\n\n\n\n\nGitHub-Repo: https://github.com/dschnitzlein/GDSR_1_Part_1/"
  }
]